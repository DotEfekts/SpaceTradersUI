@using System.Text.Json
@using System.Threading
@using System.Timers
@page "/"
@page "/map"
@page "/map/{Symbol}"
@page "/ships/{Symbol}/map"
@implements IDisposable
@inject IJSRuntime JS
@inject HttpClient Http
@inject JsonSerializerOptions SerializerOptions
@inject NavigationManager NavManager
@inject ShipsProvider ShipProvider

<div class="layout-container">
    @if (scanning)
    {
        <h3 class="body-title">Scanning...</h3>
    }
    else if (locations == null)
    {
        <h3 class="body-title">Scan failed. (Does the system exist?)</h3>
    }
    else
    {
        <h3 class="body-title">@(focusedShip != null ? "Local" : "System") Map - @(focusedShip != null ? focusedShip.DisplayName : Symbol?.ToUpper() ?? "OE")@(unknownPosition ? ": Unknown Position" : "")</h3>
    }
    <div class="map-container @(locations == null ? "hidden" :"")">
        <canvas id="map"></canvas>
    </div>
</div>

@code
{
    [Parameter]
    public string Symbol { get; set; }
    private string systemSymbol;
    private bool scanning = true;

    private Location[] locations = null;
    private ShipData[] ships = null;
    private ShipData focusedShip = null;
    private ClientSystemFlightPlan[] flightPlans = null;

    private bool unknownPosition = false;

    private const int SYSTEM_SHIP_UPDATE_INTERVAL = 10000;
    private System.Timers.Timer timer;
    private readonly SemaphoreSlim updateLock = new SemaphoreSlim(1, 1);

    protected override void OnInitialized()
    {
        ShipProvider.FlightsUpdated += FlightsUpdated;
        ShipProvider.ShipsUpdated += ShipsUpdated;

        timer = new System.Timers.Timer(SYSTEM_SHIP_UPDATE_INTERVAL);
        timer.Elapsed += UpdateSystemShips;
        timer.Enabled = true;

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        var currUri = NavManager.ToBaseRelativePath(NavManager.Uri);
        if (currUri == "" || currUri == "/")
            NavManager.NavigateTo(NavManager.BaseUri + "map");

        await UpdateLocationData(false);
        base.OnParametersSet();
    }

    public void Dispose()
    {
        ShipProvider.FlightsUpdated -= FlightsUpdated;
        ShipProvider.ShipsUpdated -= ShipsUpdated;
        timer.Elapsed -= UpdateSystemShips;
        timer.Dispose();
    }

    private async void FlightsUpdated(object sender, ShipEventArgs args)
    {
        await InvokeMapDraw();
    }

    private async void ShipsUpdated(object sender, ShipEventArgs args)
    {
        await UpdateLocationData(true);
        StateHasChanged();
    }

    private async void UpdateSystemShips(object sender, ElapsedEventArgs args)
    {
        if (await updateLock.WaitAsync(0))
        {
            try
            {
                if (systemSymbol != null && ShipProvider.GetAvailableSystems().Contains(systemSymbol))
                {
                    var systemFlightsResponse = await Http.GetFromJsonAsync<SystemFlightPlansResponse>("/systems/" + systemSymbol.ToUpper() + "/flight-plans", SerializerOptions);

                    var timeNow = DateTimeOffset.UtcNow;
                    var ownPlans = ships.Select(s => s.LastFlightPlan?.Id);
                    flightPlans = systemFlightsResponse.FlightPlans.Select(p => new ClientSystemFlightPlan
                    {
                        Id = p.Id,
                        ArrivesAt = p.ArrivesAt,
                        CreatedAt = p.CreatedAt,
                        Departure = p.Departure,
                        Destination = p.Destination,
                        Username = p.Username,
                        ShipType = p.ShipType,
                        TimeRemaining = (int)Math.Ceiling(p.ArrivesAt.Subtract(timeNow).TotalSeconds),
                        TimeElapsed = (int)Math.Ceiling(timeNow.Subtract(p.CreatedAt).TotalSeconds)
                    }).Where(p => !ownPlans.Contains(p.Id)).ToArray();
                }
                else
                    flightPlans = null;
            }
            finally
            {
                updateLock.Release();
            }
        }
    }

    private async Task UpdateLocationData(bool refresh)
    {
        if (!refresh)
            scanning = true;

        if (ShipProvider.DataRefreshing)
            return;

        var symbol = Symbol ?? "OE";

        ships = ShipProvider.GetShipData();
        if (ShipProvider.TryGetShipData(Symbol, out var ship))
        {
            unknownPosition = ship.Ship.Location == null && ship.FlightEnded;
            if (!unknownPosition)
                symbol = (ship.Ship.Location ?? ship.LastFlightPlan.Destination).Split("-")[0];
            focusedShip = ship;
        }
        else
            focusedShip = null;

        systemSymbol = symbol;

        try
        {
            var locationInfo = await Http.GetFromJsonAsync<SystemResponse>("/systems/" + symbol.ToUpper() + "/locations", SerializerOptions);
            locations = locationInfo?.Locations;
            UpdateSystemShips(null, null);
            await InvokeMapDraw();
        }
        catch (Exception)
        {
            locations = null;
        }

        scanning = false;
    }

    private async Task InvokeMapDraw()
    {
        if (locations != null)
        {
            var width = (Math.Max(locations.Max(t => t.X), Math.Abs(locations.Min(t => t.X))) * 2) + 50;
            var height = (Math.Max(locations.Max(t => t.Y), Math.Abs(locations.Min(t => t.Y))) * 2) + 25;
            await JS.InvokeVoidAsync("renderMap", locations, width, height, ships, unknownPosition ? null : focusedShip, focusedShip?.Ship.Location, flightPlans);
        }
    }
}