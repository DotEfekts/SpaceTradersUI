@using System.Text.Json
@page "/"
@page "/map"
@page "/map/{Symbol}"
@implements IDisposable
@inject IJSRuntime JS
@inject HttpClient Http
@inject JsonSerializerOptions SerializerOptions
@inject NavigationManager NavManager
@inject ShipsProvider ShipInfo
@inject StateEvents StateEvents

<div class="layout-container">
    @if (scanning)
    {
        <h3 class="body-title">Scanning...</h3>
    }
    else if (locations == null)
    {
        <h3 class="body-title">Scan failed. (Does the system exist?)</h3>
    }
    else
    {
        <h3 class="body-title">@(focusedShip != null ? "Local" : "System") Map - @(focusedShip != null ? focusedShip.DisplayName : Symbol?.ToUpper() ?? "OE")@(unknownPosition ? ": Unknown Position" : "")</h3>
    }
    <div class="map-container @(locations == null ? "hidden" :"")">
        <canvas id="map"></canvas>
    </div>
</div>

@code
{
    [Parameter]
    public string Symbol { get; set; }
    private bool scanning = true;
    private Location[] locations = null;
    private ShipData[] ships = null;
    private ShipData focusedShip = null;
    private bool unknownPosition = false;

    protected override void OnInitialized()
    {
        StateEvents.StateChange += HandleStateUpdate;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!NavManager.ToBaseRelativePath(NavManager.Uri).StartsWith("map"))
            NavManager.NavigateTo(NavManager.BaseUri + "map");

        await UpdateLocationData(false);
        base.OnParametersSet();
    }

    public void Dispose()
    {
        StateEvents.StateChange -= HandleStateUpdate;
    }

    private async void HandleStateUpdate(object sender, string type)
    {
        if (type == "shipsRefreshed")
            await UpdateLocationData(true);

        if (type == "shipsRefreshed" || type == "shipRenamed" || type == "flightsUpdated")
        {
            await InvokeMapDraw();
            StateHasChanged();
        }
    }

    private async Task UpdateLocationData(bool refresh)
    {
        if (!refresh)
            scanning = true;

        if (ShipInfo.DataRefreshing)
            return;

        var symbol = Symbol ?? "OE";

        ships = ShipInfo.GetReferencedShipData();
        var ship = ships.FirstOrDefault(t => t.Id == ShipInfo.GetShipData(Symbol)?.Id);
        if (ship != null)
        {
            unknownPosition = ship.Ship.Location == null && ship.FlightEnded;
            if (!unknownPosition)
                symbol = (ship.Ship.Location ?? ship.LastFlightPlan.Destination).Split("-")[0];
        }

        focusedShip = ship;

        try
        {
            var locationInfo = await Http.GetFromJsonAsync<SystemResponse>("/game/systems/" + symbol.ToUpper() + "/locations", SerializerOptions);
            locations = locationInfo?.Locations;
            await InvokeMapDraw();
        }
        catch (Exception)
        {
            locations = null;
        }

        scanning = false;
    }

    private async Task InvokeMapDraw()
    {
        if (locations != null)
        {
            var width = (Math.Max(locations.Max(t => t.X), Math.Abs(locations.Min(t => t.X))) * 2) + 50;
            var height = (Math.Max(locations.Max(t => t.Y), Math.Abs(locations.Min(t => t.Y))) * 2) + 25;
            await JS.InvokeVoidAsync("renderMap", locations, width, height, ships, unknownPosition ? null : focusedShip, focusedShip?.Ship.Location);
        }
    }
}