@page "/markets/{Symbol}"
@page "/ships/{Symbol}/market"
@implements IDisposable
@inject MarketProvider MarketProvider
@inject ShipsProvider ShipsProvider
@inject ConsoleOutput Console 
@inject CommandManager CommandManager 

<div class="layout-container">
    @if (market == null)
    {
        <h3 class="body-title">Invalid market provided or no data available.</h3>
    }
    else
    {
        if (market.Marketplace == null || market.Marketplace.Length == 0)
        {
            <h3 class="body-title">This market does not hold any goods.</h3>
        }
        else
        {
            <h3 class="body-title">@(ship != null ? ship.DisplayName + " - " : "")@market.Symbol Market - Data Age: @(dataAge.Days)d @(dataAge.Hours)h @(dataAge.Minutes)m</h3>
            <table class="cargo">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Quantity Available</th>
                        <th>Volume Per Unit</th>
                        <th>Buy Price</th>
                        <th>Sell Price</th>
                        @if (ship != null)
                        {
                            <th>Quantity Onboard</th>
                            <th></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var good in market.Marketplace)
                    {
                    <tr>
                        <td>@good.Symbol</td>
                        <td>@good.QuantityAvailable.ToString("N0")</td>
                        <td>@good.VolumePerUnit</td>
                        <td>@((good.PricePerUnit + good.Spread).ToString("N0"))@(ship != null ? "" : " credits")</td>
                        <td>@((good.PricePerUnit - good.Spread).ToString("N0"))@(ship != null ? "" : " credits")</td>
                        @if (ship != null)
                        {
                            <td>@(ship.Ship.Cargo.FirstOrDefault(t => t.Good == good.Symbol)?.Quantity ?? 0)</td>
                            <td>
                                <div class="table-nav">
                                    <ConfButton Label="@("\u202FBuy\u202F")" ConfirmingLabel="Conf" OnConfirm="async () => await ConfirmBuy(good.Symbol)"></ConfButton>
                                    <input type="number" value="1" min="1" max="300" @onchange="@(e => quantities[good.Symbol] = int.Parse(e.Value.ToString()))" />
                                    <ConfButton Label="Sell" ConfirmingLabel="Conf" OnConfirm="async () => await ConfirmSell(good.Symbol)"></ConfButton>
                                </div>
                            </td>
                        }
                    </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@code {
    [Parameter]
    public string Symbol { get; set; }
    private Market market = null;
    private ShipData ship = null;
    private TimeSpan dataAge = new TimeSpan();
    private Dictionary<string, int> quantities = new Dictionary<string, int>();

    protected override void OnInitialized()
    {
        MarketProvider.MarketsUpdated += MarketsUpdated;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        UpdateMarketData();
        base.OnParametersSet();
    }

    public void Dispose()
    {
        MarketProvider.MarketsUpdated -= MarketsUpdated;
    }

    private void MarketsUpdated(object sender, MarketEventArgs args)
    {
        UpdateMarketData();
        StateHasChanged();
    }

    private void UpdateMarketData()
    {
        if(ShipsProvider.TryGetShipData(Symbol, out var data)) {
            ship = data;
            market = MarketProvider.GetMarket(data.Ship.Location);
        }
        else
            market = MarketProvider.GetMarket(Symbol);

        if (market != null)
            dataAge = DateTimeOffset.UtcNow.Subtract(market.RetrievedAt);
    }

    private async Task ConfirmBuy(string good)
    {
        quantities.TryGetValue(good, out int quantity);
        if (quantity == 0) quantity = 1;
        Console.WriteLine("");
        await CommandManager.InvokeCommand("MARKET " + ship.Id + " buy " + good + " " + quantity);
    }

    private async Task ConfirmSell(string good)
    {
        quantities.TryGetValue(good, out int quantity);
        if (quantity == 0) quantity = 1;
        Console.WriteLine("");
        await CommandManager.InvokeCommand("MARKET " + ship.Id + " sell " + good + " " + quantity);
    }
}