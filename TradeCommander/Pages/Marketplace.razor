@page "/markets/{Symbol}"
@implements IDisposable
@inject MarketProvider MarketProvider

<div class="layout-container">
    @if (market == null)
    {
        <h3 class="body-title">Invalid market provided or no data available.</h3>
    }
    else
    {
        if (market.Marketplace == null || market.Marketplace.Length == 0)
        {
            <h3 class="body-title">This market does not hold any goods.</h3>
        }
        else
        {
            <h3 class="body-title">@market.Symbol Market - Data Age: @(dataAge.Days)d @(dataAge.Hours)h @(dataAge.Minutes)m</h3>
            <table class="cargo">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Quantity Available</th>
                        <th>Volume Per Unit</th>
                        <th>Buy Price</th>
                        <th>Sell Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var good in market.Marketplace)
                    {
                    <tr>
                        <td>@good.Symbol</td>
                        <td>@good.QuantityAvailable.ToString("N0")</td>
                        <td>@good.VolumePerUnit</td>
                        <td>@((good.PricePerUnit + good.Spread).ToString("N0")) credits</td>
                        <td>@((good.PricePerUnit - good.Spread).ToString("N0")) credits</td>
                    </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@code {
    [Parameter]
    public string Symbol { get; set; }
    private Market market = null;
    private TimeSpan dataAge = new TimeSpan();

    protected override void OnInitialized()
    {
        MarketProvider.MarketsUpdated += MarketsUpdated;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        UpdateMarketData();
        base.OnParametersSet();
    }

    public void Dispose()
    {
        MarketProvider.MarketsUpdated -= MarketsUpdated;
    }

    private void MarketsUpdated(object sender, MarketEventArgs args)
    {
        UpdateMarketData();
        StateHasChanged();
    }

    private void UpdateMarketData()
    {
        market = MarketProvider.GetMarket(Symbol);
        if (market != null)
            dataAge = DateTimeOffset.UtcNow.Subtract(market.RetrievedAt);
    }
}