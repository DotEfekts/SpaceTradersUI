@page "/routes/commands/{RouteId}"
@implements IDisposable
@inject SpaceTradersUserInfo UserInfo
@inject ShipsProvider ShipInfo
@inject StateEvents StateEvents
@inject AutoRouteProvider RouteInfo

<div class="layout-container">
    @if (RouteInfo.RouteData == null)
    {
        <h3 class="body-title">Loading...</h3>
    }
    else if (route == null)
    {
        <h3 class="body-title">Invalid route id provided.</h3>
    }
    else
    {
        <h3 class="body-title">Auto Route Commands - @route.DisplayName</h3>
        <table class="ships">
            <thead>
                <tr>
                    <th>Index</th>
                    <th>Command</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var command in route.Commands.OrderBy(t => t.Index))
                {
                    <tr>
                        <td>@(command.Index + 1)</td>
                        <td>@command.Command</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [Parameter]
    public string RouteId { get; set; }
    private AutoRoute route = null;

    protected override void OnInitialized()
    {
        UpdateRouteData();
        StateEvents.StateChange += HandleStateUpdate;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        UpdateRouteData();
        base.OnParametersSet();
    }

    public void Dispose()
    {
        StateEvents.StateChange -= HandleStateUpdate;
    }

    private void HandleStateUpdate(object sender, string type)
    {
        if (type == "routesRefreshed" || type == "routeCommandAdded" || type == "routeCommandDeleted")
        {
            UpdateRouteData();
            StateHasChanged();
        }
    }

    private void UpdateRouteData()
    {
        if (RouteInfo.RouteData != null)
            if (int.TryParse(RouteId, out int routeId))
                route = RouteInfo.RouteData.GetValueOrDefault(routeId);
    }
}