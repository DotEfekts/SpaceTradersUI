@page "/ships/{ShipId}/cargo"
@implements IDisposable
@inject ShipsProvider ShipProvider
@inject ConsoleOutput Console 
@inject CommandManager CommandManager 

<div class="layout-container">
    @if (shipData == null)
    {
        @if (ShipProvider.DataRefreshing)
        {
            <h3 class="body-title">Loading...</h3>
        }
        else
        {
            <h3 class="body-title">Invalid ship id provided.</h3>
        }
    }
    else
    {
<h3 class="body-title">@shipData.DisplayName - Cargo (@shipData.Ship.Cargo.Sum(t => t.TotalVolume)/@shipData.Ship.MaxCargo@(shipData.Ship.Cargo.Any(t => t.Quantity > 0 && t.TotalVolume == 0) ? " +" + shipData.Ship.Cargo.Where(t => t.TotalVolume == 0).Sum(t => t.Quantity) : ""))</h3>
        if (shipData.Ship.Cargo == null || shipData.Ship.Cargo.Length == 0)
        {
            <p>This ship does not contain any cargo.</p>
        }
        else
        {
            <table class="cargo">
                <thead>
                    <tr>
                        <th>Cargo Type</th>
                        <th>Quantity</th>
                        <th>Volume Per Unit</th>
                        <th>Total Volume</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cargo in shipData.Ship.Cargo)
                    {
                    <tr>
                        <td>@cargo.Good</td>
                        <td>@cargo.Quantity.ToString("N0")</td>
                        <td>@(cargo.TotalVolume / cargo.Quantity)</td>
                        <td>@cargo.TotalVolume.ToString("N0")</td>
                        <td>
                            <div class="table-nav">
                                <input type="number" value="1" min="1" max="@cargo.Quantity" @onchange="@(e => quantities[cargo.Good] = int.Parse(e.Value.ToString()))" />
                                <ConfButton Label="Jettison" ConfirmingLabel="Confirm?" OnConfirm="async () => await ConfirmJettison(cargo.Good)"></ConfButton>
                            </div>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@code {
    [Parameter]
    public string ShipId { get; set; }
    private ShipData shipData = null;
    private Dictionary<string, int> quantities = new Dictionary<string, int>();

    protected override void OnInitialized()
    {
        ShipProvider.ShipsUpdated += ShipsUpdated;

        UpdateCargoData();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        UpdateCargoData();
        base.OnParametersSet();
    }

    public void Dispose()
    {
        ShipProvider.ShipsUpdated -= ShipsUpdated;
    }

    private void ShipsUpdated(object sender, ShipEventArgs args)
    {
        UpdateCargoData();
        StateHasChanged();
    }

    private void UpdateCargoData()
    {
        if(ShipProvider.TryGetShipData(ShipId, out var data))
            shipData = data;
    }

    private async Task ConfirmJettison(string good)
    {
        quantities.TryGetValue(good, out int quantity);
        if (quantity == 0) quantity = 1;
        Console.WriteLine("");
        await CommandManager.InvokeCommand("SHIP " + shipData.Id + " jettison " + good + " " + quantity);
    }
}