@implements IDisposable
@inject ShipsProvider ShipProvider
@inject ConsoleOutput Console 
@inject CommandManager CommandManager 

<div class="layout-container">
    @if (ships.Length == 0)
    {
        @if (ShipProvider.DataRefreshing)
        {
            <h3 class="body-title">Loading...</h3>
        }
        else
        {
            <h3 class="body-title">You do not currently own any ships.</h3>
        }
    }
    else
    {
        <h3 class="body-title">Fleet</h3>
        <table class="ships">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Cargo</th>
                    <th>Speed</th>
                    <th>Fuel</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var shipData in ships.OrderBy(s => s.Id))
                {
                <tr>
                    <td>@shipData.Id</td>
                    <td>@shipData.DisplayName</td>
                    <td>@shipData.Ship.Type</td>
                    <td>@shipData.Ship.Cargo.Sum(t => t.TotalVolume).ToString("N0")/@shipData.Ship.MaxCargo.ToString("N0")@(shipData.Ship.Cargo.Any(t => t.Quantity > 0 && t.TotalVolume == 0) ? " +" + shipData.Ship.Cargo.Where(t => t.TotalVolume == 0).Sum(t => t.Quantity).ToString("N0") : "")</td>
                    <td>@shipData.Ship.Speed</td>
                    <td>@(shipData.Ship.Cargo.FirstOrDefault(t => t.Good == "FUEL")?.Quantity.ToString("N0") ?? "0")</td>
                    <td>@GetShipStatus(shipData.Ship)</td>
                    <td>
                        <div class="table-nav">
                            <NavLink href="@("ships/" + shipData.ServerId + "/fly")" disabled="@string.IsNullOrWhiteSpace(shipData.Ship.Location)"><div>Fly</div></NavLink>
                            <NavLink href="@("ships/" + shipData.ServerId + "/map")"><div>Map</div></NavLink>
                            <NavLink href="@("ships/" + shipData.ServerId + "/cargo")"><div>Cargo</div></NavLink>
                            <NavLink href="@("ships/" + shipData.ServerId + "/market")" @onclick="() => OpenMarket(shipData.Id)" disabled="@string.IsNullOrWhiteSpace(shipData.Ship.Location)"><div>Market</div></NavLink>
                        </div>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private ShipData[] ships;

    protected override void OnInitialized()
    {
        ShipProvider.FlightsUpdated += FlightsUpdated;
        ShipProvider.ShipsUpdated += ShipsUpdated;

        ships = ShipProvider.GetShipData();

        base.OnInitialized();
    }

    public void Dispose()
    {
        ShipProvider.FlightsUpdated -= FlightsUpdated;
        ShipProvider.ShipsUpdated -= ShipsUpdated;
    }

    private void FlightsUpdated(object sender, ShipEventArgs args)
    {
        StateHasChanged();
    }

    private void ShipsUpdated(object sender, ShipEventArgs args)
    {
        if(args.IsFullRefresh)
            ships = args.ShipDetails;
        StateHasChanged();
    }

    private string GetShipStatus(Ship ship)
    {
        if (string.IsNullOrWhiteSpace(ship.Location))
        {
            ShipProvider.TryGetShipData(ship.Id, out var data);
            var plan = data?.LastFlightPlan;
            if(plan == null || (!ShipProvider.DataRefreshing && data.FlightEnded))
                return "In Flight - Unknown Plan";
            else
                return "In Flight to " + plan.Destination + " - " + Math.Max(0, plan.TimeRemainingInSeconds) + "s";
        }
        else
        {
            return "Docked - " + ship.Location;
        }
    }

    private async void OpenMarket(int shipId)
    {
        Console.WriteLine("");
        await CommandManager.InvokeCommand("MARKET list " + shipId);
    }
}