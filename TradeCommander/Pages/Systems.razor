@using System.Text.Json
@page "/systems"
@page "/systems/{SystemSymbol}"
@inject HttpClient Http
@inject JsonSerializerOptions SerializerOptions
@inject MarketProvider MarketProvider

<div class="layout-container">
    @if (scanning)
    {
        <h3 class="body-title">Scanning...</h3>
    }
    else
    {
        if (systems == null && locations == null)
        {
            <h3 class="body-title">Scan failed. (Does the system exist?)</h3>
        }
        else if (systems != null)
        {
            <h3 class="body-title">Displaying Known Systems</h3>
            <table class="scan">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Name</th>
                        <th>Locations</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var system in systems)
                    {
                    <tr>
                        <td>@system.Symbol</td>
                        <td>@system.Name</td>
                        <td>@system.Locations.Length</td>
                        <td>
                            <div class="table-nav">
                                <NavLink href="@("map/" + system.Symbol)"><div>Map</div></NavLink>
                                <NavLink href="@("systems/" + system.Symbol)"><div>Locations</div></NavLink>
                            </div>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <h3 class="body-title">Displaying Locations - @SystemSymbol.ToUpper()</h3>
            <table class="scan">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>X</th>
                        <th>Y</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var location in locations)
                    {
                    <tr>
                        <td>@location.Symbol</td>
                        <td>@location.Name</td>
                        <td>@location.Type</td>
                        <td>@location.X</td>
                        <td>@location.Y</td>
                        <td>
                            <div class="table-nav">
                                <NavLink href="@("markets/" + location.Symbol)" disabled="@(!MarketProvider.HasMarket(location.Symbol))"><div>@(MarketProvider.HasMarket(location.Symbol) ? "\u202FMarket\u202F" : "No Data")</div></NavLink>
                            </div>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@code
{
    [Parameter]
    public string SystemSymbol { get; set; }
    private bool scanning = true;
    private Location[] locations = null;
    private SpaceSystem[] systems = null;

    protected override async Task OnParametersSetAsync()
    {
        await UpdateLocationData();
        base.OnParametersSet();
    }

    private async Task UpdateLocationData()
    {
        scanning = true;
        systems = null;
        locations = null;

        if (string.IsNullOrWhiteSpace(SystemSymbol))
        {
            try
            {
                var locationInfo = await Http.GetFromJsonAsync<GlobalResponse>("/game/systems", SerializerOptions);
                systems = locationInfo?.Systems;
            }
            catch (Exception) { }
        }
        else
        {
            try
            {
                var locationInfo = await Http.GetFromJsonAsync<SystemResponse>("/game/systems/" + SystemSymbol.ToUpper() + "/locations", SerializerOptions);
                locations = locationInfo?.Locations;
            }
            catch (Exception) { }
        }

        scanning = false;
    }
}