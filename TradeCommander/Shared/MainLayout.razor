@using Blazored.LocalStorage;
@inherits LayoutComponentBase
@implements IDisposable
@inject HttpClient Http
@inject SpaceTradersUserInfo UserInfo
@inject ConsoleOutput Console
@inject CommandHandler Commands
@inject IJSRuntime JS
@inject StateEvents StateEvents
@inject ISyncLocalStorageService LocalStorage

<div class="page">
    @if (!gameOffline.HasValue || !UserInfo.StartingDetailsChecked)
    {
        <div class="message">Loading...</div>
    }
    else
    {
        <div class="info">
            @if (UserInfo.UserDetails != null)
            {
                <div class="info-bar">
                    <span class="left">User: @UserInfo.UserDetails.Username</span>
                    <span class="right">Credits: @UserInfo.UserDetails.Credits</span>
                </div>
                <div class="ships"><TradeCommander.Pages.Ships></TradeCommander.Pages.Ships></div>
            }
            <div class="console">
                <div class="output">
                    <p class="console-text" id="console">@Console.Output</p>
                </div>
                <div class="command-input">
                    <span>&gt;</span><input type="text" name="command-input" id="command-input" @bind="commandInput" @bind:event="oninput" @onkeydown="ReadCommand" />
                </div>
            </div>
        </div>
        <div class="body">
            @if (UserInfo.UserDetails != null)
            {
                <div class="content">
                    @Body
                </div>
            }
        </div>
    }
</div>

@code
{
    private bool? gameOffline = null;

    private string commandInput = "";

    private List<string> commandHistory = new List<string>();
    private int historyIndex = -1;

    private Queue<string> commandQueue = new Queue<string>();
    private bool queueRunning = false;


    private bool initialMessageShown = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetAsync("/game/status");
            gameOffline = result.StatusCode != System.Net.HttpStatusCode.OK;
        }
        catch (Exception) { gameOffline = true; }
        finally { StateEvents.TriggerUpdate(this, "gameStatus"); }

        Console.OutputUpdated += HandleConsoleUpdate;
        StateEvents.StateChange += HandleStateUpdate;

        if (LocalStorage.ContainKey("commandHistory"))
            commandHistory = LocalStorage.GetItem<List<string>>("commandHistory");

        base.OnInitialized();
    }

    public void Dispose()
    {
        Console.OutputUpdated -= HandleConsoleUpdate;
        StateEvents.StateChange -= HandleStateUpdate;
    }

    private void HandleConsoleUpdate(object sender, string type)
    {
        StateHasChanged();
        JS.InvokeVoidAsync("scrollConsoleDown");
    }

    private void HandleStateUpdate(object sender, string type)
    {
        if (type == "userChecked" || type == "gameStatus" || type == "cargoPurchased" || type == "cargoSold")
            StateHasChanged();
        if (type == "userLogout")
            initialMessageShown = false;
        if (type == "userLogin" || type == "userLogout")
        {
            commandHistory.Clear();
            LocalStorage.SetItem("commandHistory", commandHistory);

            historyIndex = -1;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!initialMessageShown && UserInfo.StartingDetailsChecked && gameOffline.HasValue)
        {
            initialMessageShown = true;
            if (gameOffline == true)
            {
                Console.WriteLine("Please refresh to retry.");
            }
            else if (UserInfo.UserDetails == null)
            {
                await Console.WriteLine("User details required.", 500);
                await Console.WriteLine("Login command: LOGIN <Username> <Token>", 250);
                await Console.WriteLine("Signup command: SIGNUP <Username>", 250);
            }
            else
            {
                Console.WriteLine("Welcome back, " + UserInfo.UserDetails.Username + ".");
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ReadCommand(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var command = commandInput;
            commandInput = "";

            if (!string.IsNullOrWhiteSpace(command))
            {
                commandHistory.Insert(0, command);
                LocalStorage.SetItem("commandHistory", commandHistory);
            }
            historyIndex = -1;

            await AddToCommandQueue(command);
        }
        else if (e.Code == "ArrowUp")
        {

            if (historyIndex < commandHistory.Count - 1)
            {
                historyIndex++;
                commandInput = commandHistory[historyIndex];
                StateHasChanged();
                await JS.InvokeVoidAsync("moveCaretToEnd");
            }
        }
        else if (e.Code == "ArrowDown")
        {
            if (historyIndex >= 0)
            {
                historyIndex--;
                if (historyIndex >= 0)
                    commandInput = commandHistory[historyIndex];
                else
                    commandInput = "";
                StateHasChanged();
                await JS.InvokeVoidAsync("moveCaretToEnd");
            }
        }
    }

    private async Task AddToCommandQueue(string command)
    {
        commandQueue.Enqueue(command);

        if (!queueRunning)
        {
            queueRunning = true;
            do
            {
                var nextCommand = commandQueue.Dequeue();
                Console.WriteLine("");
                Console.WriteLine("> " + nextCommand);

                if (gameOffline == true)
                    Console.WriteLine("SpaceTraders API is offline.");
                else
                    await Commands.HandleCommand(nextCommand);
            } while (commandQueue.Any());
            queueRunning = false;
        }
    }
}
