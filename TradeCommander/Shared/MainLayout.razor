@using Blazored.LocalStorage;
@using TradeCommander.CommandHandlers;
@inherits LayoutComponentBase
@implements IDisposable
@inject HttpClient Http
@inject UserProvider UserProvider
@inject ConsoleOutput Console
@inject CommandManager Commands
@inject IJSRuntime JS
@inject ISyncLocalStorageService LocalStorage
@inject SettingsProvider SettingsProvider


@if (!gameOffline.HasValue || (!gameOffline.Value && !UserProvider.StartingDetailsChecked))
{
    <div class="loading">
        <img src="img/spacetraders-logo.png" alt="SpaceTraders Logo" />
        <div class="title">
            <span class="text1">Trade</span>
            <span class="text2">Commander</span>
        </div>
        <span class="subtitle">Is Loading...</span>
    </div>
}
else if (gameOffline.HasValue && gameOffline.Value)
{
    <div class="loading">
        <img src="img/spacetraders-logo.png" alt="SpaceTraders Logo" />
        <div class="title">
            <span class="text1">Trade</span>
            <span class="text2">Commander</span>
        </div>
        <span class="subtitle">SpaceTraders API is offline.<br />Please refresh to retry.</span>
    </div>
}
else
{
    <div class="page">
        <div class="info">
            @if (UserProvider.UserDetails != null)
            {
                <div class="info-bar">
                    <span class="left">User: @UserProvider.UserDetails.Username</span>
                    <span class="right">Credits: @UserProvider.UserDetails.Credits.ToString("N0")</span>
                </div>
                <div class="ships"><TradeCommander.Pages.Ships></TradeCommander.Pages.Ships></div>
            }
            <div class="console">
                <div class="output" id="console" @ref="consoleOutputElement">
                    <div class="text-container">
                        <p class="console-text">@Console.Output</p>
                    </div>
                </div>
                <div class="command-input">
                    <span>&gt;</span><input type="text" name="command-input" id="command-input" @bind="commandInput" @bind:event="oninput" @onkeydown="HandleInput" @ref="commandInputElement" />
                </div>
            </div>
        </div>
        <div class="body">
            @if (UserProvider.UserDetails != null)
            {
                <div class="content">
                    @Body
                </div>
            }
        </div>
    </div>
}

@code
{
    private bool? gameOffline = null;

    private ElementReference commandInputElement;
    private bool inputBound = false;
    private string commandInput = "";

    private List<string> commandHistory = new List<string>();
    private int historyIndex = -1;

    private string preCompleteInput = "";
    private int autoCompleteIndex = 0;

    private Queue<string> commandQueue = new Queue<string>();
    private bool queueRunning = false;

    private ElementReference consoleOutputElement;
    private bool initialMessageShown = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetAsync("/game/status");
            gameOffline = !result.IsSuccessStatusCode;
        }
        catch (Exception) { gameOffline = true; }
        finally { StateHasChanged(); }

        Console.OutputUpdated += OutputUpdated;
        UserProvider.UserUpdated += UserUpdated;
        SettingsProvider.SettingsUpdated += SettingsUpdated;

        if (UserProvider.Username != null && LocalStorage.ContainKey("CommandHistory." + UserProvider.Username))
            commandHistory = LocalStorage.GetItem<List<string>>("CommandHistory." + UserProvider.Username);
        ApplySettings(SettingsProvider.GetSettings());

        base.OnInitialized();
    }

    public void Dispose()
    {
        Console.OutputUpdated -= OutputUpdated;
        UserProvider.UserUpdated -= UserUpdated;
        SettingsProvider.SettingsUpdated -= SettingsUpdated;
    }

    private void OutputUpdated(object sender, string type)
    {
        StateHasChanged();
        JS.InvokeVoidAsync("scrollConsoleDown", consoleOutputElement);
    }

    private void UserUpdated(object sender, UserEventArgs eventArgs)
    {
        if (eventArgs.UserDetails == null)
            initialMessageShown = false;

        if (!eventArgs.IsInitialCheck)
            commandHistory.Clear();

        if (eventArgs.UserDetails != null && LocalStorage.ContainKey("CommandHistory." + UserProvider.Username))
            commandHistory = LocalStorage.GetItem<List<string>>("CommandHistory." + UserProvider.Username);

        historyIndex = -1;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!inputBound && commandInputElement.Context != null)
        {
            inputBound = true;
            await JS.InvokeVoidAsync("bindToInput", commandInputElement);
        }

        if (!initialMessageShown && UserProvider.StartingDetailsChecked && gameOffline.HasValue)
        {
            initialMessageShown = true;
            if (UserProvider.UserDetails == null)
            {
                await Console.WriteLine("User details required.", 500);
                await Console.WriteLine("Login command: LOGIN <Username> <Token>", 250);
                await Console.WriteLine("Signup command: SIGNUP <Username>", 250);
            }
            else
            {
                Console.WriteLine("Welcome back, " + UserProvider.Username + ".");
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Code == "Tab")
        {
            if (autoCompleteIndex == 0)
                preCompleteInput = commandInput;
            commandInput = Commands.HandleAutoComplete(preCompleteInput, autoCompleteIndex++);
        }
        else
        {
            autoCompleteIndex = 0;
        }

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var command = commandInput;
            commandInput = "";

            string historyCommand = null;
            if (historyIndex != -1)
                historyCommand = commandHistory[historyIndex];
            historyIndex = -1;

            if ((commandHistory.Count == 0 || command != commandHistory[0]) && !string.IsNullOrWhiteSpace(command) && UserProvider.Username != null)
            {

                commandHistory.Insert(0, command);
                if (commandHistory.Count > 100)
                    commandHistory.RemoveRange(100, commandHistory.Count - 100);

                LocalStorage.SetItem("CommandHistory." + UserProvider.Username, commandHistory);
            }


            await AddToCommandQueue(command);
        }
        else if (e.Code == "ArrowUp")
        {

            if (historyIndex < commandHistory.Count - 1)
            {
                historyIndex++;
                commandInput = commandHistory[historyIndex];
                StateHasChanged();
                await JS.InvokeVoidAsync("moveCaretToEnd", commandInputElement);
            }
        }
        else if (e.Code == "ArrowDown")
        {
            if (historyIndex >= 0)
            {
                historyIndex--;
                if (historyIndex >= 0)
                    commandInput = commandHistory[historyIndex];
                else
                    commandInput = "";
                StateHasChanged();
                await JS.InvokeVoidAsync("moveCaretToEnd", commandInputElement);
            }
        }
    }

    private async Task AddToCommandQueue(string command)
    {
        commandQueue.Enqueue(command);

        if (!queueRunning)
        {
            queueRunning = true;
            do
            {
                var nextCommand = commandQueue.Dequeue();
                Console.WriteLine("");
                Console.WriteLine("> " + nextCommand);
                await Commands.InvokeCommand(nextCommand, false);
            } while (commandQueue.Any());
            queueRunning = false;
        }
    }

    private void SettingsUpdated(object sender, SettingsEventArgs eventArgs)
    {
        ApplySettings(eventArgs.Settings);
    }

    private async void ApplySettings(Setting[] settings)
    {
        var contentColour = settings.FirstOrDefault(s => s.Key == "content-colour");
        if (contentColour != null)
        {
            if (!await JS.InvokeAsync<bool>("setCssVar", "--content-color", contentColour.Value))
                Console.WriteLine("Warning: content-colour setting \"" + contentColour.Value + "\" is invalid. Ignoring.");
        }
        else
            await JS.InvokeVoidAsync("setCssVar", "--content-color", null);

        var backgroundColour = settings.FirstOrDefault(s => s.Key == "background-colour");
        if (backgroundColour != null)
        {
            if (!await JS.InvokeAsync<bool>("setCssVar", "--background-color", backgroundColour.Value))
                Console.WriteLine("Warning: background-colour setting \"" + backgroundColour.Value + "\" is invalid. Ignoring.");
        }
        else
            await JS.InvokeVoidAsync("setCssVar", "--background-color", null);

        var crtEffect = settings.FirstOrDefault(s => s.Key == "crt-effect");
        if (crtEffect != null && crtEffect.Value == "off")
            await JS.InvokeVoidAsync("setBodyClass", null);
        else
            await JS.InvokeVoidAsync("setBodyClass", "crt");

        StateHasChanged();
    }
}
